* How can single core run multiple programs?
- Context switching.
	OS scheduler manage which program to run
	Each program runs for small time slices 
	and scheduler switches into other program.
	
* Thread of execution 
- the smallest sequence of programmed instructions 
	that can be managed independently by a scheduler, 
	which is typically a part of the operating system.	

So single process can run with several threads.
Process is a running program, and each program does not share memory with others.
However, threads in the same process do.

Parallelization works for independent task.
*Even if you assign 3 threads, 
it does not guarantee that all of them are assigned 
to different core.
Maybe if you are lucky, but if all of them are assigned into the same core,
it runs under context switching.

* detach?: forgetting running thread
* thread does not return 

Serilalization: Event A must happen before Event B (sequential) <=> concurrent != simultaneous
Non-determination: exact order is not defined.
Race condition: result depends on the timing
Atomic: an operation cannot be interrupted
	
상호 배제(Mutual exclusion) : 하나의 프로세스가 임계 구역에 들어가 있다면 다른 프로세스는 들어갈 수 없어야 한다.
진행(Progress) : 임계 구역에 들어간 프로세스가 없는 상태에서, 들어가려고 하는 프로세스가 여러 개 있다면 어느 것이 들어갈지를 적절히 결정해주어야 한다.
한정 대기(Bounded waiting) : 다른 프로세스의 기아(Starvation)를 방지하기 위해, 한 번 임계 구역에 들어간 프로세스는 다음 번 임계 구역에 들어갈 때 제한을 두어야 한다.

*Dekker’s algorithm
Awantsin = 0
Bwantsin = 0;
favor = A

ThreadA:
Awantsin = 1
while (Bwantsin == 1)
{
	if (favor == B)
	{
		Awantsin = 0;
		while (favor == B) {}
		Awantsin = 1;
	}
}
CS
favor = B;
Awantsin = 0;
NonCS

ThreadB:
Bwantsin = 1
while (Awantsin == 1)
{
	if (favor == A)
	{
		Bwantsin = 0;
		while (favor == A) {}
		Bwantsin = 1;
	}
}
CS
favor = A;
Bwantsin = 0;
NonCS