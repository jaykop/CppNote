* How a C++ program looks like
	- Text segment 
		기계어로 변환된 실행코드가 메모리 or obj에 저장
	- Data segment 
		초기화된 전역변수 및 정적변수
	- BSS segment 
		비초기화된 전역변수 및 정적변수
		OS 커널에서 산술적 값 0으로 초기화
		혹은 explicit 초기화 없이 유지 
	- Stack 
		지역변수 및 매개변수 
		스코프 벗어나면 해제
	- Heap 
		동적할당 메모리

* Types of casting and differeneces
	- downcasting
	- upcasting
		부모 클래스 -> 자식 클래스 형변환
		사이즈 차이에 따라 오버 플로우가 생길 수 있음
	- static_cast
		논리형 변환
	- const_cast
		const(상수성) 추가/제거
	- reinterpret_cast
		포인터 간의 캐스팅
		강제 형변환
	- dynamic_cast
		상속관계 끼리의 타입 캐스팅
	
* How a C++ function works
	
	Stack segment(= Call stack)
	모든 활성함수를 추적, 함수 매개변수와 지역변수의 할당 처리
	스택에 할당/해제되는 데이터 덩어리 = Stack Frame
	CPU Stack Pointer = 최상위 스택 프레임 pointing
	https://boycoding.tistory.com/235
	
	- 프로그램에 함수 호출
	- 스택 프레임이 생성되고 콜 스택에 푸시. 
		스택 프레임:
			함수가 종료되면 복귀할 주소
			함수의 모든 매개 변수
			지역 변수
			함수가 반환할 때 복원해야 하는 수정된 레지스터의 복사본
	- CPU가 함수의 시작점으로 점프한다.
	- 함수 내부의 명령어를 실행한다.
	
	함수가 종료 이후:

	- 레지스터가 콜 스택에서 복원
	- 스택 프레임이 콜 스택에서 해제
		모든 지역 변수와 매개 변수에 대한 메모리 해제
	- 반환 값이 처리
	- CPU는 반환 주소에서 실행을 재개	

3. Difference between pointer and reference
4. What is function pointer
5. Describe about Move operator
6. Differenece between prefix and postfix
7. Describe about friend keyword
8. What is exception
9. Types of Smart pointer
10. What is lambda expression
11. What is overloading
12. lvalue and rvalue
13. difference btw vector stack
13. Reason why using namespace
14. 3 charisteristics of class
15. Ways to resolve memory fragmentation
		